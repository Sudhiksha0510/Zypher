#quiz.py
import streamlit as st
import base64

# --- PAGE CONFIGURATION ---
st.set_page_config(
    page_title="Zypher Quizzes",
    page_icon="ðŸ§ ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- MOCK QUIZ QUESTIONS ---
# In a real app, this would be generated by your RAG/Bedrock backend based on the topic
MOCK_QUESTIONS = {
    "Data Structures & Algorithms": [
        {
            "question": "What is the time complexity of a binary search algorithm?",
            "options": ["O(n)", "O(log n)", "O(n^2)", "O(1)"],
            "answer": "O(log n)"
        },
        {
            "question": "Which data structure uses the Last-In, First-Out (LIFO) principle?",
            "options": ["Queue", "Tree", "Stack", "Graph"],
            "answer": "Stack"
        },
        {
            "question": "What is the primary purpose of a Hash Table?",
            "options": ["To store data in a sorted order", "To enable fast key-based lookups", "To represent hierarchical data", "To find the shortest path in a network"],
            "answer": "To enable fast key-based lookups"
        }
    ],
    "Database Management Systems": [
        {
            "question": "What does SQL stand for?",
            "options": ["Strong Question Language", "Structured Query Language", "Simple Query Lexicon", "Structured Question Lexicon"],
            "answer": "Structured Query Language"
        },
        {
            "question": "Which SQL command is used to add new data to a database?",
            "options": ["ADD", "UPDATE", "INSERT", "CREATE"],
            "answer": "INSERT"
        }
    ]
}

# --- INITIALIZE SESSION STATE for the new quiz flow ---
if 'quiz_subject' not in st.session_state:
    st.session_state.quiz_subject = None
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False
if 'show_results' not in st.session_state:
    st.session_state.show_results = False
if 'user_answers' not in st.session_state:
    st.session_state.user_answers = {}

# --- HELPER FUNCTION ---
def get_image_as_base_64(file):
    try:
        with open(file, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode()
    except FileNotFoundError:
        return ""

# --- STYLING ---
logo_base_64 = get_image_as_base_64("../zypher.png")
page_styling = f"""
<style>
    /* General Page Styling & Navbar (same as other pages) */
    [data-testid="stAppViewContainer"] {{ background-image: linear-gradient(180deg, #e0f7fa 0%, #c8e6c9 100%); }}
    #MainMenu, footer, header {{ visibility: hidden; }}
    .navbar {{ position: fixed; top: 0; left: 0; width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 10px 30px; background: rgba(255, 255, 255, 0.3); backdrop-filter: blur(10px); border-bottom: 1px solid rgba(255, 255, 255, 0.2); z-index: 1000; box-sizing: border-box; }}
    .navbar .logo-brand {{ display: flex; align-items: center; gap: 15px; }}
    .navbar .logo-img {{ width: 40px; height: 40px; }}
    .navbar .brand-name {{ font-size: 1.5rem; font-weight: bold; color: #002e00; text-decoration: none; }}
    .navbar .nav-links a {{ color: #004d00; text-decoration: none; margin: 0 15px; font-weight: 500; }}
    .navbar .nav-links a.active, .navbar .nav-links a:hover {{ color: #002e00; font-weight: 600; }}
    .profile-dropdown {{ position: relative; display: inline-block; }}
    .profile-dropdown:hover .dropdown-content {{ display: block; }}
    .dropdown-content {{ display: none; position: absolute; right: 0; background-color: rgba(255, 255, 255, 0.9); min-width: 200px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1; border-radius: 10px; overflow: hidden; }}
    .main-container {{ padding: 80px 2rem 2rem 2rem; color: #002e00; }}

    /* --- STYLING FOR QUIZ PAGE --- */
    .quiz-card {{
        background: rgba(255, 255, 255, 0.45);
        backdrop-filter: blur(12px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 30px;
        width: 100%;
        max-width: 800px;
        margin: auto;
    }}
    .quiz-card h1 {{ font-size: 2rem; color: #002e00; text-align: center; }}
    .quiz-card h4 {{ font-size: 1.1rem; color: #002e00; margin-top: 1.5rem;}}
    .question-text {{ font-size: 1.25rem; font-weight: 500; color: #004d00; margin-bottom: 20px; }}
    div[data-testid="stForm"] {{ text-align: left; }} /* Align form content left */

    /* --- NEW: Styling for Topic Selection Boxes --- */
    div[data-testid="stHorizontalBlock"] > div {{
        background: rgba(255, 255, 255, 0.6);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
    }}
    div[data-testid="stHorizontalBlock"] > div:hover {{
        transform: scale(1.04);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
    }}
    div[data-testid="stHorizontalBlock"] h3 {{
        color: #002e00;
        margin-bottom: 15px;
    }}
</style>
"""
st.markdown(page_styling, unsafe_allow_html=True)

# --- NAVIGATION BAR ---
logo_html = f'<img src="data:image/png;base64,{logo_base_64}" class="logo-img">' if logo_base_64 else ''
st.markdown(f"""
    <div class="navbar">
        <div class="logo-brand">{logo_html}<a href="#" class="brand-name">Zypher</a></div>
        <div class="nav-links">
            <a href="home">Home</a>
            <a href="plan">My Plan</a> 
            <a href="streak">Progress</a> 
            <a href="#" class="active">Quiz</a>
            <div class="profile-dropdown">
                <a href="#">Profile</a>
                <div class="dropdown-content">
                    <div class="user-info"><p>Sahasra</p></div>
                    <a href="#" class="signout-link">Sign Out</a>
                </div>
            </div>
        </div>
    </div>
""", unsafe_allow_html=True)

# --- QUIZ LOGIC AND UI ---
st.markdown('<div class="main-container">', unsafe_allow_html=True)
st.markdown('<div class="quiz-card">', unsafe_allow_html=True)

# State 1: Topic Selection (Now with Boxes)
if not st.session_state.quiz_started:
    st.markdown("<h1>Select a Topic to Begin</h1>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True) # Add some space
    
    topics = list(MOCK_QUESTIONS.keys())
    cols = st.columns(len(topics), gap="large")

    for i, col in enumerate(cols):
        with col:
            st.markdown(f"### {topics[i]}")
            if st.button("Start Quiz", key=f"start_{topics[i]}", use_container_width=True):
                st.session_state.quiz_subject = topics[i]
                st.session_state.quiz_started = True
                st.session_state.show_results = False
                st.session_state.user_answers = {}
                st.rerun()

# State 2: Quiz in Progress
elif st.session_state.quiz_started and not st.session_state.show_results:
    st.markdown(f"<h1>{st.session_state.quiz_subject} Quiz</h1>", unsafe_allow_html=True)
    questions = MOCK_QUESTIONS[st.session_state.quiz_subject]
    
    with st.form("quiz_form"):
        user_answers = {}
        for i, q_data in enumerate(questions):
            st.markdown(f'<p class="question-text">Question {i + 1}: {q_data["question"]}</p>', unsafe_allow_html=True)
            user_answers[i] = st.radio("Choose your answer:", q_data["options"], key=f"q_{i}", index=None, label_visibility="collapsed")
            st.markdown("---")
        
        submitted = st.form_submit_button("Submit Quiz")
        if submitted:
            st.session_state.user_answers = user_answers
            st.session_state.show_results = True
            st.rerun()

# State 3: Show Results
else:
    st.markdown("<h1>Quiz Results</h1>", unsafe_allow_html=True)
    questions = MOCK_QUESTIONS[st.session_state.quiz_subject]
    score = 0
    
    for i, q_data in enumerate(questions):
        user_answer = st.session_state.user_answers.get(i)
        correct_answer = q_data['answer']
        
        st.markdown(f'<h4>Question {i+1}: {q_data["question"]}</h4>', unsafe_allow_html=True)
        
        if user_answer == correct_answer:
            score += 1
            st.success(f"Your answer: {user_answer} (Correct!)")
        elif user_answer is None:
            st.warning(f"You did not answer this question. The correct answer was: {correct_answer}")
        else:
            st.error(f"Your answer: {user_answer} (Incorrect). The correct answer was: {correct_answer}")
        st.markdown("---")
    
    total_questions = len(questions)
    final_score_percent = (score / total_questions) * 100
    st.markdown(f"## Your Final Score: **{score}/{total_questions}** ({final_score_percent:.2f}%)")

    if st.button("Take Another Quiz"):
        st.session_state.quiz_started = False
        st.session_state.quiz_subject = None
        st.session_state.show_results = False
        st.session_state.user_answers = {}
        st.rerun()

st.markdown('</div>', unsafe_allow_html=True) # Close quiz-card
st.markdown('</div>', unsafe_allow_html=True) # Close main-container
